#include "../library/header.hpp"
#include "../library/bigint.hpp"

string _map_[201];

void init() {
    _map_[1] = "1";
    _map_[2] = "10";
    _map_[3] = "111";
    _map_[4] = "100";
    _map_[5] = "10";
    _map_[6] = "1110";
    _map_[7] = "1001";
    _map_[8] = "1000";
    _map_[9] = "111111111";
    _map_[10] = "10";
    _map_[11] = "11";
    _map_[12] = "11100";
    _map_[13] = "1001";
    _map_[14] = "10010";
    _map_[15] = "1110";
    _map_[16] = "10000";
    _map_[17] = "11101";
    _map_[18] = "1111111110";
    _map_[19] = "11001";
    _map_[20] = "100";
    _map_[21] = "10101";
    _map_[22] = "110";
    _map_[23] = "110101";
    _map_[24] = "111000";
    _map_[25] = "100";
    _map_[26] = "10010";
    _map_[27] = "1111111101";
    _map_[28] = "100100";
    _map_[29] = "1101101";
    _map_[30] = "1110";
    _map_[31] = "111011";
    _map_[32] = "100000";
    _map_[33] = "111111";
    _map_[34] = "111010";
    _map_[35] = "10010";
    _map_[36] = "11111111100";
    _map_[37] = "111";
    _map_[38] = "110010";
    _map_[39] = "10101";
    _map_[40] = "1000";
    _map_[41] = "11111";
    _map_[42] = "101010";
    _map_[43] = "1101101";
    _map_[44] = "1100";
    _map_[45] = "1111111110";
    _map_[46] = "1101010";
    _map_[47] = "10011";
    _map_[48] = "1110000";
    _map_[49] = "1100001";
    _map_[50] = "100";
    _map_[51] = "100011";
    _map_[52] = "100100";
    _map_[53] = "100011";
    _map_[54] = "11111111010";
    _map_[55] = "110";
    _map_[56] = "1001000";
    _map_[57] = "11001";
    _map_[58] = "11011010";
    _map_[59] = "11011111";
    _map_[60] = "11100";
    _map_[61] = "100101";
    _map_[62] = "1110110";
    _map_[63] = "1111011111";
    _map_[64] = "1000000";
    _map_[65] = "10010";
    _map_[66] = "1111110";
    _map_[67] = "1101011";
    _map_[68] = "1110100";
    _map_[69] = "11111001";
    _map_[70] = "10010";
    _map_[71] = "10011";
    _map_[72] = "111111111000";
    _map_[73] = "10001";
    _map_[74] = "1110";
    _map_[75] = "11100";
    _map_[76] = "1100100";
    _map_[77] = "1001";
    _map_[78] = "101010";
    _map_[79] = "11101001";
    _map_[80] = "10000";
    _map_[81] = "1111111101";
    _map_[82] = "111110";
    _map_[83] = "101011";
    _map_[84] = "1010100";
    _map_[85] = "111010";
    _map_[86] = "11011010";
    _map_[87] = "11010111";
    _map_[88] = "11000";
    _map_[89] = "11010101";
    _map_[90] = "1111111110";
    _map_[91] = "1001";
    _map_[92] = "11010100";
    _map_[93] = "10000011";
    _map_[94] = "100110";
    _map_[95] = "110010";
    _map_[96] = "11100000";
    _map_[97] = "11100001";
    _map_[98] = "11000010";
    _map_[99] = "111111111111111111";
    _map_[100] = "100";
    _map_[101] = "101";
    _map_[102] = "1000110";
    _map_[103] = "11100001";
    _map_[104] = "1001000";
    _map_[105] = "101010";
    _map_[106] = "1000110";
    _map_[107] = "100010011";
    _map_[108] = "111111110100";
    _map_[109] = "1111111011";
    _map_[110] = "110";
    _map_[111] = "111";
    _map_[112] = "10010000";
    _map_[113] = "1011011";
    _map_[114] = "110010";
    _map_[115] = "1101010";
    _map_[116] = "110110100";
    _map_[117] = "11111110101";
    _map_[118] = "110111110";
    _map_[119] = "110001101";
    _map_[120] = "111000";
    _map_[121] = "11011";
    _map_[122] = "1001010";
    _map_[123] = "10011100011";
    _map_[124] = "11101100";
    _map_[125] = "1000";
    _map_[126] = "11110111110";
    _map_[127] = "11010011";
    _map_[128] = "10000000";
    _map_[129] = "100100001";
    _map_[130] = "10010";
    _map_[131] = "101001";
    _map_[132] = "11111100";
    _map_[133] = "11101111";
    _map_[134] = "11010110";
    _map_[135] = "11111111010";
    _map_[136] = "11101000";
    _map_[137] = "10001";
    _map_[138] = "111110010";
    _map_[139] = "110110101";
    _map_[140] = "100100";
    _map_[141] = "10011";
    _map_[142] = "100110";
    _map_[143] = "1001";
    _map_[144] = "1111111110000";
    _map_[145] = "11011010";
    _map_[146] = "100010";
    _map_[147] = "1100001";
    _map_[148] = "11100";
    _map_[149] = "110111";
    _map_[150] = "11100";
    _map_[151] = "1110001";
    _map_[152] = "11001000";
    _map_[153] = "11111011011";
    _map_[154] = "10010";
    _map_[155] = "1110110";
    _map_[156] = "1010100";
    _map_[157] = "10101101011";
    _map_[158] = "111010010";
    _map_[159] = "100011";
    _map_[160] = "100000";
    _map_[161] = "11101111";
    _map_[162] = "11111111010";
    _map_[163] = "1010111";
    _map_[164] = "1111100";
    _map_[165] = "1111110";
    _map_[166] = "1010110";
    _map_[167] = "11111011";
    _map_[168] = "10101000";
    _map_[169] = "10111101";
    _map_[170] = "111010";
    _map_[171] = "1111011111";
    _map_[172] = "110110100";
    _map_[173] = "1011001101";
    _map_[174] = "110101110";
    _map_[175] = "100100";
    _map_[176] = "110000";
    _map_[177] = "101110011";
    _map_[178] = "110101010";
    _map_[179] = "11010111";
    _map_[180] = "11111111100";
    _map_[181] = "1001111";
    _map_[182] = "10010";
    _map_[183] = "100101";
    _map_[184] = "110101000";
    _map_[185] = "1110";
    _map_[186] = "100000110";
    _map_[187] = "1001011";
    _map_[188] = "1001100";
    _map_[189] = "1111111100001";
    _map_[190] = "110010";
    _map_[191] = "11101111";
    _map_[192] = "111000000";
    _map_[193] = "11001";
    _map_[194] = "111000010";
    _map_[195] = "101010";
    _map_[196] = "110000100";
    _map_[197] = "1101000101";
    _map_[198] = "1111111111111111110";
    _map_[199] = "111000011";
    _map_[200] = "1000";
}

unsigned long long int string_to_ulli (string str) {
    stringstream ss;
    ss << str << endl;
    unsigned long long int val;
    ss >> val;
    return val;
}

string find_the_multiple(int val) {
    queue<string> q;
    unsigned long long int a;
    q.push("1");
    q.push("0");
    while (!q.empty()) {
        string current = q.front();
        q.pop();
        if ('1' == current[0]) {
            a = string_to_ulli(current);
            if (a % val == 0) {
                return current;
            }
        }
        q.push("0" + current);
        q.push("1" + current);
    }
}

class POJ1426 {
public:
	void solve(std::istream& in, std::ostream& out) {
	    init();
	    int n;
	    while (in >> n, n) {
	        out << _map_[n] << endl;
	    }
	}
};
