/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author ismdeep
 */

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <stack>
#include <vector>
#include <algorithm>
#include <list>
#include <map>
#include <queue>
#include <bitset>
#include <numeric>
#include <sstream>
#include <limits>

using namespace std;


#define TIMES(id, size) for(int id = 0; id < (size); ++id)
#define FOR(type_id, id, from, to, step) for(type_id id = (from); id <= (to); id += step)
#define DBG(x) \
    (void)(cout << "L" << __LINE__ \
    << ": " << #x << " = " \
    << (x) << '\n')

typedef unsigned long long uint64_t;
typedef unsigned char uint8_t;


class HDU2268 {
public:
	void solve(std::istream& in, std::ostream& out) {
	    int a, b, c;
	    while (in >> a >> b >> c) {
            double t;
            double s1;
            if (b > a) {
                s1 = ((b + a) * 1.0 / (b + 3 * a)) * c;
                t = s1 / b + (c - s1) / a;
            } else {
                t = c * 1.0 / a;
            }
            char ch[1024];
            sprintf(ch, "%.3f", t);
            string str = ch;
            out << str << endl;
	    }
	}
};


int main() {
	HDU2268 solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
