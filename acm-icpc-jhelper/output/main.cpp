/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author ismdeep
 */

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <stack>
#include <vector>
#include <algorithm>
#include <list>
#include <map>
#include <queue>
#include <bitset>
#include <numeric>
#include <sstream>
#include <limits>
#include <string.h>
#include <string>
using namespace std;


#define TIMES(id, size) for(int id = 0; id < (size); ++id)
#define FOR(type_id, id, from, to, step) for(type_id id = (from); id <= (to); id += step)
#define DBG(x) \
    (void)(cout << "L" << __LINE__ \
    << ": " << #x << " = " \
    << (x) << '\n')


string dict[] = {
        "ling", "yi", "er", "san", "si", "wu", "liu", "qi", "ba", "jiu"
};

class PAT1002 {
public:
    void solve(std::istream &in, std::ostream &out) {
        string str;
        in >> str;
        int ans = 0;
        for (int i = 0; i < str.length(); ++i) {
            ans += str[i] - '0';
        }
        stack<int> s;
        while (ans != 0) {
            s.push(ans % 10);
            ans /= 10;
        }
        bool flag = false;
        while (!s.empty()) {
            if (flag) {
                out << " ";
            }
            flag = true;
            out << dict[s.top()];
            s.pop();
        }
        out << endl;
    }
};


int main() {
	PAT1002 solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
