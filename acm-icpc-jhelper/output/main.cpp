/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author ismdeep
 */

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <stack>
#include <vector>
#include <algorithm>
#include <list>
#include <map>
#include <queue>
#include <bitset>
#include <numeric>
#include <sstream>
#include <limits>
#include <string.h>
#include <string>
using namespace std;


#define TIMES(id, size) for(int id = 0; id < (size); ++id)
#define FOR(type_id, id, from, to, step) for(type_id id = (from); id <= (to); id += step)
#define DBG(x) (void)(cout << "L" << __LINE__ << ": " << #x << " = " << (x) << '\n')


bool is_ok(int val) {
    if (val < 100) {
        return false;
    }
    if (val > 999) {
        return false;
    }
    int a, b, c, t;
    t = val;
    c = t % 10; t /= 10;
    b = t % 10; t /= 10;
    a = t % 10;
    return val == a*a*a + b*b*b + c*c*c;
}

class DOTCPP1016 {
public:
	void solve(std::istream& in, std::ostream& out) {
	    FOR(int, val, 100, 999, 1) {
	        if (is_ok(val)) {
	            out << val << endl;
	        }
	    }
	}
};


int main() {
	DOTCPP1016 solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
