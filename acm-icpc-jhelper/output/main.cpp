/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author ismdeep
 */

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <stack>
#include <vector>
#include <algorithm>
#include <list>
#include <map>
#include <queue>
#include <bitset>
#include <numeric>
#include <sstream>
#include <limits>
#include <string.h>
#include <string>
using namespace std;


#define TIMES(id, size) for(int id = 0; id < (size); ++id)
#define FOR(type_id, id, from, to, step) for(type_id id = (from); id <= (to); id += step)
#define DBG(x) (void)(cout << "L" << __LINE__ << ": " << #x << " = " << (x) << '\n')


int digital_count(int n) {
    if (n == 0) {
        return 1;
    }

    int cnt = 0;
    while (n) {
        ++cnt;
        n /= 10;
    }
    return cnt;
}



class DOTCPP1009 {
public:
	void solve(std::istream& in, std::ostream& out) {
	    int n;
	    in >> n;
	    out << digital_count(n) << endl;
	    if (n == 0) {
	        out << "0" << endl << "0" << endl;
	        return;
	    }
	    int ans = 0;
	    stack<int> _stack;
	    while (n) {
	        _stack.push(n % 10);
	        ans *= 10;
	        ans += n % 10;
	        n /= 10;
	    }

	    bool flag = false;
	    while (!_stack.empty()) {
	        if (flag) {
	            out << " ";
	        }
	        flag = true;
	        out << _stack.top();
	        _stack.pop();
	    }
	    out << endl;

	    out << ans << endl;
	}
};


int main() {
	DOTCPP1009 solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
