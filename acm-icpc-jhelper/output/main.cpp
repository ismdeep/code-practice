/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author ismdeep
 */

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <stack>
#include <vector>
#include <algorithm>
#include <list>
#include <map>
#include <queue>
#include <bitset>
#include <numeric>
#include <sstream>
#include <limits>

using namespace std;


#define TIMES(id, size) for(int id = 0; id < (size); ++id)
#define FOR(type_id, id, from, to, step) for(type_id id = (from); id < (to); id += step)

typedef unsigned long long uint64_t;
typedef unsigned char uint8_t;


class Aizu0011 {
public:
	void solve(std::istream& in, std::ostream& out) {
	    int w;
	    int n;
	    int left;
	    int right;
	    int tmp;
	    string str;
	    in >> w >> n;
	    int* a = (int*) malloc(sizeof(int) * (w + 1));
	    for (int i = 1; i <= w; ++i) {
	        a[i] = i;
	    }
	    while (n--) {
	        in >> str;
	        sscanf(str.data(), "%d,%d", &left, &right);
	        tmp = a[left];
	        a[left] = a[right];
	        a[right] = tmp;
	    }
	    for (int i = 1; i <= w; ++i) {
	        out << a[i] << endl;
	    }
	}
};


int main() {
	Aizu0011 solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
